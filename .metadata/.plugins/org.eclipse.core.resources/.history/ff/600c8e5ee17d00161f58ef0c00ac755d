package particules;

import java.awt.Color;
import java.util.Random;

import Environment.Environement;
import core.Agent;
import core.Direction;

public class Sharks extends Agent {

	private int x, y;
	private int cpt;
	private int breedTime;
	private int starveTime;
	private Direction dir;
	private int xNext = this.getX() + this.getPasX();
	private int yNext = this.getY() + this.getPasY();

	public Sharks() {
		this.color = Color.pink;
		this.dir = new Direction();
	}

	@Override
	public int getX() {
		return this.x;
	}

	@Override
	public int getY() {
		return this.y;
	}

	@Override
	public int getPasX() {
		return this.dir.pasX;
	}

	@Override
	public int getPasY() {
		return this.dir.pasY;
	}

	@Override
	public void decide() {
		move();
	}

	private boolean move() {
		int[][] neighborFishs = getNeighborFish();
		int[][] neighborSharks = getNeighborSharks();
		Random rand =new Random();
		if(neighborFishs.length>0){
			while(Environement.gridXY[xNext][yNext] != 1){
			int pasX = rand.nextInt(3) - 1;
            int pasY = rand.nextInt(3) - 1;
            xNext=this.getX()+pasX;
            yNext=this.getY()+pasY;          
			}
			this.eat(Environement.gridXY[xNext][yNext]);
			return false;
			}else if(haveBlank().length!=0){
				
		}
	private void eat(int i) {
		
	}
	}

	private int[][] getNeighborFish() {
		int[][] neighbor = new int[3][3];

		for (int i = -1; i < 2; i++) {
			for (int j = -1; j < 2; j++) {
				if (Environement.gridXY[this.getX() + i][this.getY() + j] == 1 ) {
					neighbor[i + 1][i + 1] = 1;
				}
			}
		}
		neighbor[1][1] = 0;
		return neighbor;
	}

	private int[][] haveBlank() {
		int[][] blank = new int[3][3];

		for (int i = -1; i < 2; i++) {
			for (int j = -1; j < 2; j++) {
				if (Environement.gridXY[this.getX() + i][this.getY() + j] == 0 ) {
					blank[i + 1][i + 1] = 1;
				}
			}
		}
		blank[1][1] = 0;
		return blank;
	}
	
	@Override
	public void usePostion(int theX, int theY) {
		Environement.gridXY[theX][theY] = 2;
	}

	@Override
	public void freePosition(int theX, int theY) {
		Environement.gridXY[theX][theY] = 0;
	}

	@Override
	public void setXY(int theX, int theY) {
		this.x = theX;
		this.y = theY;
	}

	@Override
	public void setPasXY(int thePasX, int thePasY) {
		this.dir.pasX = thePasX;
		this.dir.pasY = thePasY;
	}

}
