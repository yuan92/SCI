package particules;

import java.awt.Color;
import java.util.ArrayList;

import Environment.Environement;
import core.Agent;
import core.Direction;

public class Fishs extends Agent {

	private int x, y;
	private int birthday;
	private int periodPregnant;
	private Direction dir;

	public Fishs() {
		this.color = Color.blue;
		this.dir = new Direction();
	}

	@Override
	public int getX() {
		return x;
	}

	@Override
	public int getY() {
		return y;
	}

	@Override
	public int getPasX() {
		return this.dir.pasX;
	}

	@Override
	public int getPasY() {
		return this.dir.pasY;
	}

	public boolean move() {
		boolean conflict = false;
		ArrayList<Agent> neighbor = (ArrayList<Agent>) getNeighbor();
		int xNext = this.getX() + this.getPasX();
		int yNext = this.getY() + this.getPasY();

		// if the fish is surrounded by 8 grid.
		if ((xNext > 0) && (xNext < Environement.gridSizeX - 1) && (0 < yNext)
				&& (yNext < Environement.gridSizeY - 1)) {
			if (neighbor.size() < 8) {// when there are some blanks
				while (Environement.gridXY[xNext][yNext] != 0) {
					xNext = this.getX();
					yNext = this.getY();
					this.setPasXY(new Direction().pasX, new Direction().pasY);
					xNext = this.getX() + this.getPasX();
					yNext = this.getY() + this.getPasY();
				}
				usePostion(xNext, yNext);
				return false;
			} else {
				xNext = this.getX();
				yNext = this.getY();
				return false;
			}
		} else {
			if(this.getX()==0||this.getX()==Environement.gridSizeX-1){
				this.setPasXY(-getPasX(), getPasY());
			}else if (this.getY()==0||this.getY()==Environement.gridSizeY-1){
				this.setPasXY(getPasX(), -getPasY());
			}
			xNext += 2*this.getPasX();
			yNext += 2*this.getPasY();
			// now, the fish is at the edge of the view
			int cpt = 0;
			while ((xNext < 0) || (xNext > Environement.gridSizeX - 1)
					|| (yNext < 0) || (yNext > Environement.gridSizeY - 1)
					|| Environement.gridXY[xNext][yNext] != 0&&cpt<=5) {
				xNext = this.getX();
				yNext = this.getY();
				this.setPasXY(new Direction().pasX, new Direction().pasY);
				xNext = this.getX() + this.getPasX();
				yNext = this.getY() + this.getPasY();
			}
			
		}

		return conflict;

	}

	private ArrayList<Agent> getNeighbor() {

		return null;
	}

	@Override
	public void decide() {
		move();
	}

	@Override
	public void usePostion(int theX, int theY) {
		// TODO Auto-generated method stub

	}

	@Override
	public void freePosition(int theX, int theY) {
		// TODO Auto-generated method stub

	}

	@Override
	public void setXY(int theX, int theY) {
		// TODO Auto-generated method stub

	}

	@Override
	public void setPasXY(int thePasX, int thePasY) {
		// TODO Auto-generated method stub

	}

}
